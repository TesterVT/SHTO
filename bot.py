import logging
import json
import random
import asyncio
import datetime
import requests
import twitchio
from twitchio.ext import commands
from Logger import log_to_file
from modules import cats, general, admin, city, mafia, rcon_module, weather, alias, AI, emote_tracker, holiday, profiles
from modules.general import afk_times, sleep_times 
import time
import aiohttp
import re
import aiosqlite
from data import config_loader
from modules.profiles import upsert_profile
from modules.filter import FilterModule

TOKEN = config_loader.get_token()
CHANNELS = config_loader.get_channels()
OWNERS = config_loader.get_owners()
OWNER_CHANNEL = config_loader.get_owner_channel()
EMOTE_SET_ID = config_loader.get_emote_set_id()


logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")
logger = logging.getLogger(__name__)


emotes_list = []

class TwitchBot(commands.Bot):
    def __init__(self):
        super().__init__(token=TOKEN, prefix="!", initial_channels=CHANNELS)
        self.load_modules()
        self.loaded_modules = {"cat", "general", "admin", "city", "mafia","rcon_module","weather","alias", "AI", "emote_tracker", "holiday", "profile"}
        self.loop.create_task(self.periodic_emote_update())
        admin_cog = admin.AdminCommands(self)
        self.admin = admin_cog
        self.filter = FilterModule()

    def load_modules(self):
        self.loaded_modules = set()

        for module_name, module in [("cat", cats), ("general", general), ("admin", admin), ("city", city),("mafia", mafia),("rcon", rcon_module),("weather",weather),("alias", alias),("ai", AI), ("emote", emote_tracker), ("holiday", holiday), ("profle", profiles)]:
            try:
                logger.debug(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å: {module_name}")

                # –ï—Å–ª–∏ –º–æ–¥—É–ª—å —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–≥—Ä—É–∂–∞–µ–º –µ–≥–æ
                if module_name in self.loaded_modules:
                    logger.info(f"–ú–æ–¥—É–ª—å {module_name} —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –í—ã–≥—Ä—É–∂–∞—é –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π.")
                    self.unload_module(module_name)

                # –ü–æ–∏—Å–∫ –∫–ª–∞—Å—Å–∞-–∫–æ–≥–∞ –≤ –º–æ–¥—É–ª–µ
                cog_class = next(
                    (getattr(module, attr) for attr in dir(module) if isinstance(getattr(module, attr), type)),
                    None
                )

                if cog_class:
                    self.add_cog(cog_class(self))
                    self.loaded_modules.add(module_name)
                    logger.info(f"–ú–æ–¥—É–ª—å {module_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
                else:
                    logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω –∫–ª–∞—Å—Å-cog –≤ –º–æ–¥—É–ª–µ {module_name}, –ø—Ä–æ–ø—É—Å–∫–∞—é!")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è {module_name}: {e}", exc_info=True)




    async def event_ready(self):
        logger.info(f"–ë–æ—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫–∞–∫ {self.nick}")
        await self.fetch_emotes()
        
    async def event_message(self, message):
        if message.author is None:
            return

        username = message.author.name.lower()
        now = datetime.datetime.now()

        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª –º–µ–∂–¥—É –ø—Ä–µ—Ñ–∏–∫—Å–æ–º –∏ –∫–æ–º–∞–Ω–¥–æ–π –¥–ª—è !cat, !cot, !koshka
        if message.content.startswith(("! cat", "! cot", "! koshka")):
            message.content = message.content.replace("! ", "!", 1)

        if username in afk_times:
            duration = now - afk_times.pop(username)
            await message.channel.send(f"@{message.author.name} –≤–µ—Ä–Ω—É–ª—Å—è –∏–∑ AFK. –ë—ã–ª AFK {str(duration).split('.')[0]}")

        if username in sleep_times:
            duration = now - sleep_times.pop(username)
            await message.channel.send(f"@{message.author.name} –ø—Ä–æ—Å–Ω—É–ª—Å—è –ø–æ—Å–ª–µ —Å–Ω–∞. –°–ø–∞–ª {str(duration).split('.')[0]}")

        if admin.echo_user and username == admin.echo_user:
            if self.filter.check_message(message.content):
                logger.warning(f"üö´ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.author.name} —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞: {message.content}")
                return
            else:
                await message.channel.send(message.content)

        if self.filter.check_message(message.content):
            logger.warning(f"üö´ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.author.name} —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–ª–æ–≤–∞: {message.content}")
            return

        # ‚¨áÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        twitch_id = str(message.author.id)
        nickname = message.author.name
        upsert_profile(twitch_id, nickname)

        channel_name = message.channel.name.lower()
        admin_cog = self.get_cog("AdminCommands")
        admin_cog.cursor.execute("SELECT 1 FROM disabled_channels WHERE channel_name = ?", (channel_name,))
        command_prefixes = ['!', '!!']
        if admin_cog.cursor.fetchone():
            if any(message.content.startswith(p) for p in command_prefixes):
                return


        if hasattr(bot.get_cog("AdminCommands"), "is_ignored"):
            if bot.get_cog("AdminCommands").is_ignored(message.author.name.lower()):
                return

        logger.info(f"[{message.author.name}]: {message.content}")


        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö (!!) –∞–ª–∏–∞—Å–æ–≤
        # –í–Ω—É—Ç—Ä–∏ event_message ‚Äî –î–û handle_commands(message)
        if message.content.startswith("!!"):
            clean_content = "!!" + message.content[2:].lstrip()  # —É–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–æ—Å–ª–µ !!
            logger.info(f"‚û°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–∏–∞—Å–∞: {clean_content}")
            message.content = clean_content  # –∑–∞–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –æ—á–∏—â–µ–Ω–Ω–æ–µ
            handled = await alias.AliasCommands.handle_custom_alias(self, message)
            if handled:
                return
        

        from Logger import log_to_file
        log_to_file(message.author.name, message.content)
        await self.handle_commands(message)


    async def fetch_emotes(self):
        global emotes_list
        try:
            response = requests.get(f"https://7tv.io/v3/emote-sets/{EMOTE_SET_ID}")
            response.raise_for_status()
            data = response.json()
            if "emotes" in data:
                emotes_list = [emote["name"] for emote in data["emotes"]]
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(emotes_list)} —ç–º–æ—É—Ç–æ–≤.")
        except requests.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç–º–æ—É—Ç–æ–≤: {e}")

    async def periodic_emote_update(self):
        while True:
            await asyncio.sleep(600)  # –ö–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
            if emotes_list:
                random_emote = random.choice(emotes_list)
                channel = self.get_channel(OWNER_CHANNEL)
                if channel:
                    await channel.send(random_emote)
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —ç–º–æ—É—Ç: {random_emote}")


while True:
    try:
        bot = TwitchBot()
        bot.run()
    except (aiohttp.ClientConnectionError, ConnectionResetError, asyncio.CancelledError) as e:
        logger.warning(f"üîå –ü–æ—Ç–µ—Ä—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Twitch: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
        time.sleep(10)
    except Exception as e:
        logger.exception("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞, –±–æ—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥")
        time.sleep(30)

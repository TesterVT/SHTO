import datetime
import random
from twitchio.ext import commands
import openai

sleep_times = {}
afk_times = {}
import time
import aiohttp

BOT_START_TIME = time.time()
command_usage_count = 0


class GeneralCommands(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.version = "1.2"
        self.creator = "TesterVT"
        @bot.event()
        async def event_command(ctx):
            global command_usage_count
            command_usage_count += 1


    @commands.command(name="gn")
    async def good_night(self, ctx: commands.Context):
        if hasattr(self.bot, "admin") and self.bot.admin.is_module_disabled(ctx.channel.name, "general"):
            return
        username = ctx.author.name.lower()
        sleep_times[username] = datetime.datetime.now()
    
        message = ctx.message.content[len(ctx.prefix) + len(ctx.command.name) + 1:].strip()
    
        if message:
            await ctx.send(f"@{ctx.author.name} —É—à–µ–ª —Å–ø–∞—Ç—å: {message}")
        else:
            await ctx.send(f"@{ctx.author.name} —É—à–µ–ª —Å–ø–∞—Ç—å. –°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏!")

    @commands.command(name="afk")
    async def away_from_keyboard(self, ctx: commands.Context):
        if hasattr(self.bot, "admin") and self.bot.admin.is_module_disabled(ctx.channel.name, "general"):
            return
        username = ctx.author.name.lower()

        message = ctx.message.content[len(ctx.prefix) + len(ctx.command.name) + 1:].strip()

        afk_times[username] = datetime.datetime.now()
        if message:
            await ctx.send(f"@{ctx.author.name} —É—à–µ–ª AFK: {message}")
        else:
            await ctx.send(f"@{ctx.author.name} —É—à–µ–ª AFK. –í–µ—Ä–Ω–µ—Ç—Å—è –ø–æ–∑–∂–µ!")


    @commands.command(name="shuffle")
    async def shuffle(self, ctx: commands.Context):
        if hasattr(self.bot, "admin") and self.bot.admin.is_module_disabled(ctx.channel.name, "general"):
            return
        message = ctx.message.content[len(ctx.prefix) + len(ctx.command.name) + 1:].strip()
        shuffled = ''.join(random.sample(message, len(message)))
        await ctx.send(f"@{ctx.author.name}, {shuffled}")

    @commands.command(name="delivery")
    async def delivery(self, ctx: commands.Context):
        if hasattr(self.bot, "admin") and self.bot.admin.is_module_disabled(ctx.channel.name, "general"):
            return
        username = ctx.author.name.lower()

        message = ctx.message.content[len(ctx.prefix) + len(ctx.command.name) + 1:].strip()

        afk_times[username] = datetime.datetime.now()
        if message:
            await ctx.send(f"@{ctx.author.name} —É—à–µ–ª –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É: {message}")
        else:
            await ctx.send(f"@{ctx.author.name} —É—à–µ–ª –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É. –£–¥–∞—á–∏!")

    @commands.command(name="work")
    async def work(self, ctx: commands.Context):
        if hasattr(self.bot, "admin") and self.bot.admin.is_module_disabled(ctx.channel.name, "general"):
            return
        username = ctx.author.name.lower()

        message = ctx.message.content[len(ctx.prefix) + len(ctx.command.name) + 1:].strip()

        afk_times[username] = datetime.datetime.now()
        if message:
            await ctx.send(f"@{ctx.author.name} —É—à–µ–ª –Ω–∞ —Ä–∞–±–æ—Ç—É: {message}")
        else:
            await ctx.send(f"@{ctx.author.name} —É—à–µ–ª –Ω–∞ —Ä–∞–±–æ—Ç—É. –£–¥–∞—á–∏!")

    @commands.command(name="tuck")
    async def tuck_someone(self, ctx: commands.Context):
        if hasattr(self.bot, "admin") and self.bot.admin.is_module_disabled(ctx.channel.name, "general"):
            return
        args = ctx.message.content.split()
        if len(args) > 1:
            target_user = args[1].lower()
            sleep_times[target_user] = datetime.datetime.now()
            await ctx.send(f"@{target_user}, —Ç–µ–±—è —É–ª–æ–∂–∏–ª–∏ —Å–ø–∞—Ç—å! –°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏!")
        else:
            await ctx.send("–ò—Å–ø–æ–ª—å–∑—É–π: !tuck <username>")

    @commands.command(name="ping")
    async def ping(self, ctx: commands.Context):
        if hasattr(self.bot, "admin") and self.bot.admin.is_module_disabled(ctx.channel.name, "general"):
            return
        global command_usage_count

        # –í—Ä–µ–º—è –∞–ø—Ç–∞–π–º–∞
        uptime_seconds = time.time() - BOT_START_TIME
        hours = int(uptime_seconds // 3600)
        minutes = int((uptime_seconds % 3600) // 60)
        uptime_str = f"{hours} —á. {minutes} –º."

        # –ü–∏–Ω–≥ –¥–æ Twitch API
        start = time.perf_counter()
        async with aiohttp.ClientSession() as session:
            async with session.get("https://api.twitch.tv") as response:
                await response.text()
        end = time.perf_counter()
        latency = int((end - start) * 1000)  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

        # –ö–æ–ª-–≤–æ –∫–∞–Ω–∞–ª–æ–≤ –∏ –∫–æ–º–∞–Ω–¥
        channels_count = len(self.bot.connected_channels)
        commands_count = len(self.bot.commands)

        await ctx.send(
            f"üèì –ü–æ–Ω–≥! | ü¶ä v. {self.version} - by {self.creator} | üïê {uptime_str} | "
            f"üëÄ {channels_count} —Ç–∞–±(–æ–≤) | üìú –ó–∞–≥—Ä—É–∂–µ–Ω–æ {commands_count} –∫–æ–º–º–∞–Ω–¥, –≤—ã–ø–æ–ª–Ω–µ–Ω–æ {command_usage_count} | {latency} –º—Å"
        )

    @commands.command(name="help")
    async def help(self, ctx: commands.Context):

        if hasattr(self.bot, "admin") and self.bot.admin.is_module_disabled(ctx.channel.name, "general"):
            return
        await ctx.send(f"–í–µ—Å—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–∞–Ω–¥ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç—É—Ç: https://testervt.github.io/ ")



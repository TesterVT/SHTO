import json
import random
import asyncio
import time
from twitchio.ext import commands
import logging

logger = logging.getLogger(__name__)


TIMER_FILE = "cat_timers.json"

def load_timers():
    try:
        with open(TIMER_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_timers(data):
    with open(TIMER_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4)

active_timers = load_timers()


# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ —Å–ø–∏—Å–∫–∞ –∫–æ—Ç–æ–≤
def load_cats():
    try:
        with open("cats.json", "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {}
def load_data(filename, default=None):
    try:
        with open(filename, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return default if default is not None else {}


def save_cats(data):
    with open("cats.json", "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4)

cats = load_cats()
items = load_data("items.json", ["–ò–≥—Ä—É—à–∫–∞", "–†—ã–±–∞", "–†–µ–¥–∫–∏–π –∫–∞–º–µ–Ω—å", "–ü–µ—Ä—ã—à–∫–æ"])

SOUPS = {
    "–°—É–ø üç≤": (10, 50),
    "–°—É–ø –∏–∑ —Ä—ã–±—ã üêü": (10, 60),
    "–ú—è—Å–Ω–æ–π —Å—É–ø üçñ": (15, 75),
    "–û–≤–æ—â–Ω–æ–π —Å—É–ø ü•ï": (12, 55),
    "–°—É–ø-—Å—é—Ä–ø—Ä–∏–∑ üéÅ": (18, 90)
}


def level_up(cat):
    leveled_up = False
    while cat['experience'] >= (100 * cat['level'] + (cat['level'] * 50)):  # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è
        experience_to_next_level = 100 * cat['level'] + (cat['level'] * 50)
        cat['experience'] -= experience_to_next_level
        cat['level'] += 1
        leveled_up = True
    return leveled_up

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–æ–≥–ª–∞–∂–∏–≤–∞–Ω–∏—é
def add_petting_stat(cat):
    if 'pettings' not in cat:
        cat['pettings'] = 0
    cat['pettings'] += 1

class CatCommands(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        # –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º "busy"
        for cat in cats.values():
            cat["busy"] = False
            if "channel" not in cat:
                cat["channel"] = "global"  # –∏–ª–∏ ctx.channel.name.lower() –µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω–æ
        save_cats(cats)
        load_timers()

    async def load_timers(self):
        for username, data in list(active_timers.items()):
            try:
                remaining = data["end_time"] - time.time()
                if remaining > 0:
                    asyncio.create_task(self.resume_timer(username, data["type"], remaining))
                else:
                    asyncio.create_task(self.finish_timer(username, data["type"]))
            except Exception as e:
                logger.warning(f"üö´ –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–∞–π–º–µ—Ä–∞ {username}: {e}")

    async def resume_timer(self, username, timer_type, delay):
        await asyncio.sleep(delay)
        await self.finish_timer(username, timer_type)

    async def finish_timer(self, username, timer_type):
        cat = cats.get(username)
        timer = active_timers.get(username)
        if not cat or not timer:
            return

        channel_name = timer["channel"]
        cat["busy"] = False
        if timer_type == "walk":
            found_item = random.choice(items) if random.random() < 0.5 else None
            if found_item:
                cat["inventory"].append(found_item)
                cat["experience"] += 20
                await self.bot.get_channel(channel_name).send(f"@{username}, –∫–æ—Ç {cat['name']} –≤–µ—Ä–Ω—É–ª—Å—è —Å –ø—Ä–æ–≥—É–ª–∫–∏ –∏ –Ω–∞—à–µ–ª: {found_item}! üéÅ")
            else:
                cat["experience"] += 10
                await self.bot.get_channel(channel_name).send(f"@{username}, –∫–æ—Ç {cat['name']} –≤–µ—Ä–Ω—É–ª—Å—è —Å –ø—Ä–æ–≥—É–ª–∫–∏. üåø")
        elif timer_type == "soup":
            cat["hunger"] -= 10
            soup_name, (_, price) = random.choice(list(SOUPS.items()))
            cat["inventory"].append(soup_name)
            if cat.get("boost_until", 0) > time.time():
                cat["experience"] += int(10 * 1.5)
            else:
                cat["experience"] += 30
            level_up(cat)
            await self.bot.get_channel(channel_name).send(f"@{username}, –∫–æ—Ç {cat['name']} —Å–≤–∞—Ä–∏–ª {soup_name}! üçΩÔ∏è")
        save_cats(cats)
        active_timers.pop(username, None)
        save_timers(active_timers)

    @commands.command(name="cat", aliases=["cot", "koshka"])
    async def cat_command(self, ctx: commands.Context):
        if hasattr(self.bot, "admin") and self.bot.admin.is_module_disabled(ctx.channel.name, "cat"):
            await ctx.send("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !cat(!cat, !koshka) –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ –Ω–∞ –¥–∞–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ.")
            return
        args = ctx.message.content.split()
        username = ctx.author.name.lower()

        if len(args) < 2:
            await ctx.send("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: adopt, top, inv, friends, feed, soup, info, rename, shop, sell, sell_all, meet, pet")
            return

        action = args[1].lower()
        
        if action == "adopt":
            if username in cats:
                await ctx.send(f"@{ctx.author.name}, —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∫–æ—Ç! üê±")
                return
            name = args[2] if len(args) > 2 else random.choice(["–ë–∞—Ä—Å–∏–∫", "–ú—É—Ä–∫–∞", "–†—ã–∂–∏–∫"])
            cats[username] = {"name": name, "hunger": 100, "level": 1, "busy": False, "experience": 0, "currency": 0, "food": 1, "inventory": [], "friends": [], "happiness": 100, "cleanliness": 100, "channel": ctx.channel.name.lower(), "boost_until": 0  }
            save_cats(cats)
            await ctx.send(f"@{ctx.author.name} –∑–∞–≤—ë–ª –∫–æ—Ç–∞ {name}! üêæ")

        elif action == "rename":
            if username not in cats:
                await ctx.send(f"@{ctx.author.name}, —É —Ç–µ–±—è –Ω–µ—Ç –∫–æ—Ç–∞.")
                return
            new_name = args[2] if len(args) > 2 else "–ë–µ–∑—ã–º—è–Ω–Ω—ã–π"
            cats[username]["name"] = new_name
            save_cats(cats)
            await ctx.send(f"@{ctx.author.name} –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª –∫–æ—Ç–∞ –≤ {new_name}!")

        elif action == "feed":
            if username not in cats:
                await ctx.send(f"@{ctx.author.name}, —É —Ç–µ–±—è –Ω–µ—Ç –∫–æ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π !cat adopt üêæ")
                return
            if cats[username]["food"] <= 0:
                await ctx.send(f"@{ctx.author.name}, —É —Ç–µ–±—è –Ω–µ—Ç –µ–¥—ã! –ö—É–ø–∏ –µ—ë –≤ !cat shop üõí")
                return
            cats[username]["food"] -= 1
            cats[username]["hunger"] = min(100, cats[username]["hunger"] + 30)
            save_cats(cats)
            await ctx.send(f"@{ctx.author.name} –ø–æ–∫–æ—Ä–º–∏–ª –∫–æ—Ç–∞ {cats[username]['name']} ! üò∫")
        
        elif action == "walk":
            if username not in cats:
                await ctx.send(f"@{ctx.author.name}, —É —Ç–µ–±—è –Ω–µ—Ç –∫–æ—Ç–∞.")
                return
            cat = cats[username]
            if cat["busy"]:
                await ctx.send(f"{ctx.author.name}, —Ç–≤–æ–π –∫–æ—Ç —Å–µ–π—á–∞—Å –∑–∞–Ω—è—Ç! üò∫")
                return
            if cat["happiness"] < 5:
                await ctx.send(f"{ctx.author.name}, —É —Ç–≤–æ–µ–≥–æ –∫–æ—Ç–∞ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–æ–µ —Å—á–∞—Å—Ç—å–µ, —á—Ç–æ–±—ã –∏–¥—Ç–∏ –≥—É–ª—è—Ç—å! üò∫")
                return
            if cat["cleanliness"] < 10:
                await ctx.send(f"{ctx.author.name}, —Ç–≤–æ–π –∫–æ—Ç —Å–ª–∏—à–∫–æ–º –≥—Ä—è–∑–Ω—ã–π –¥–ª—è –ø—Ä–æ–≥—É–ª–∫–∏! üò∫")
                return

            cat["busy"] = True
            cat["happiness"] -= 5
            cat["cleanliness"] = max(0, cat["cleanliness"] - 10)
            walk_time = 30 * 60
            end_time = time.time() + walk_time
            active_timers[username] = {"type": "walk", "end_time": end_time, "channel": ctx.channel.name.lower()}
            save_cats(cats)
            save_timers(active_timers)

            await ctx.send(f"{ctx.author.name}, —Ç–≤–æ–π –∫–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –Ω–∞ –ø—Ä–æ–≥—É–ª–∫—É –Ω–∞ 30 –º–∏–Ω—É—Ç üêæ")
            asyncio.create_task(self.resume_timer(username, "walk", walk_time))


        elif action == "soup":
            if username not in cats:
                await ctx.send(f"@{ctx.author.name}, —É —Ç–µ–±—è –Ω–µ—Ç –∫–æ—Ç–∞. üêæ")
                return
            cat = cats[username]
            if cat["hunger"] < 10:
                await ctx.send(f"@{ctx.author.name}, –∫–æ—Ç {cat['name']} —Å–ª–∏—à–∫–æ–º –≥–æ–ª–æ–¥–µ–Ω, —á—Ç–æ–±—ã –≤–∞—Ä–∏—Ç—å —Å—É–ø! üç≤")
                return
            if cat["busy"]:
                await ctx.send(f"@{ctx.author.name}, –∫–æ—Ç {cat['name']} —É–∂–µ —á–µ–º-—Ç–æ –∑–∞–Ω—è—Ç! ‚è≥")
                return

            cat["busy"] = True
            soup_time = 45 * 60
            end_time = time.time() + soup_time
            active_timers[username] = {"type": "soup", "end_time": end_time, "channel": ctx.channel.name.lower()}
            save_cats(cats)
            save_timers(active_timers)

            await ctx.send(f"@{ctx.author.name}, –∫–æ—Ç {cat['name']} –Ω–∞—á–∞–ª –≤–∞—Ä–∏—Ç—å —Å—É–ø! üç≤ –≠—Ç–æ –∑–∞–π–º–µ—Ç 45 –º–∏–Ω—É—Ç.")
            asyncio.create_task(self.resume_timer(username, "soup", soup_time))

    
        elif action == "sell":
            if username not in cats:
                await ctx.send(f"@{ctx.author.name}, —É —Ç–µ–±—è –Ω–µ—Ç –∫–æ—Ç–∞. üêæ")
                return
            for soup, (_, price) in SOUPS.items():
                if soup in cats[username]["inventory"]:
                    cats[username]["inventory"].remove(soup)
                    cats[username]["currency"] += price
                    save_cats(cats)
                    await ctx.send(f"@{ctx.author.name}, –∫–æ—Ç {cats[username]['name']} –ø—Ä–æ–¥–∞–ª {soup} –∑–∞ {price} –º–æ–Ω–µ—Ç! üí∞")
                    return
            await ctx.send(f"@{ctx.author.name}, —É —Ç–µ–±—è –Ω–µ—Ç —Å—É–ø–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏! üç≤")


        elif action == "sell_all":
            if username not in cats:
                await ctx.send(f"@{ctx.author.name}, —É —Ç–µ–±—è –Ω–µ—Ç –∫–æ—Ç–∞. üêæ")
                return

            total_earnings = 0
            count = 0
            for soup, (_, price) in SOUPS.items():
                while soup in cats[username]["inventory"]:
                    cats[username]["inventory"].remove(soup)
                    cats[username]["currency"] += price
                    total_earnings += price
                    count += 1

            if count == 0:
                await ctx.send(f"@{ctx.author.name}, —É —Ç–µ–±—è –Ω–µ—Ç —Å—É–ø–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏! üç≤")
            else:
                save_cats(cats)
                await ctx.send(f"@{ctx.author.name}, –∫–æ—Ç {cats[username]['name']} –ø—Ä–æ–¥–∞–ª {count} —Å—É–ø–æ–≤ –∑–∞ {total_earnings} –º–æ–Ω–µ—Ç! üí∞")

        elif action == "cancel":
            if username not in cats:
                await ctx.send(f"@{ctx.author.name}, —É —Ç–µ–±—è –Ω–µ—Ç –∫–æ—Ç–∞.")
                return
            cat = cats[username]
            if not cat["busy"]:
                await ctx.send(f"@{ctx.author.name}, —Ç–≤–æ–π –∫–æ—Ç –∏ —Ç–∞–∫ —Å–≤–æ–±–æ–¥–µ–Ω.")
                return

            cat["busy"] = False
            if username in active_timers:
                del active_timers[username]
                save_timers(active_timers)
            save_cats(cats)
            await ctx.send(f"@{ctx.author.name}, –¥–µ–π—Å—Ç–≤–∏–µ –∫–æ—Ç–∞ {cat['name']} –æ—Ç–º–µ–Ω–µ–Ω–æ. ‚ùå")


        elif action == "shop":
            await ctx.send("üõí –í –º–∞–≥–∞–∑–∏–Ω–µ –µ—Å—Ç—å: –ö–æ—Ä–º (10 –º–æ–Ω–µ—Ç) - !cat buy food")
        
        elif action == "buy":
            if len(args) < 3:
                await ctx.send("–ò—Å–ø–æ–ª—å–∑—É–π: !cat buy food")
                return
            if args[2] == "food":
                if cats[username]["currency"] < 10:
                    await ctx.send(f"@{ctx.author.name}, —É —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! üí∞")
                    return
                cats[username]["currency"] -= 10
                cats[username]["food"] += 1
                save_cats(cats)
                await ctx.send(f"@{ctx.author.name} –∫—É–ø–∏–ª –∫–æ—Ä–º! üçñ")
            elif args[2] == "boost":
                if cats[username]["currency"] < 50:
                    await ctx.send(f"@{ctx.author.name}, —É —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç! üí∞")
                    return
                cats[username]["currency"] -= 50
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π boost_until –Ω–∞ 1 —á–∞—Å –≤–ø–µ—Ä—ë–¥
                cats[username]["boost_until"] = int(time.time()) + 3600  # –í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö + 1 —á–∞—Å
                save_cats(cats)
                await ctx.send(f"@{ctx.author.name} –∫—É–ø–∏–ª –±—É—Å—Ç –¥–ª—è –∫–æ—Ç–∞! üöÄ")


        elif action == "top":
            channel = ctx.channel.name.lower()
            top_cats = [
                (user, data)
                for user, data in cats.items()
                if data.get("channel") == channel
            ]
            top_cats.sort(key=lambda x: x[1].get("level", 0), reverse=True)
            top_cats = top_cats[:5]

            if not top_cats:
                await ctx.send("–ù–∞ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ –µ—â—ë –Ω–µ—Ç –∫–æ—Ç–æ–≤ –¥–ª—è —Ç–æ–ø–∞.")
                return

            msg = "üèÜ –¢–æ–ø –∫–æ—Ç–æ–≤ –∫–∞–Ω–∞–ª–∞:\n"
            for i, (user, data) in enumerate(top_cats, 1):
                msg += f" {i}. {data['name']} ‚Äî –£—Ä–æ–≤–µ–Ω—å: {data['level'] } | \n"
            await ctx.send(msg)

        elif action == "top_global":
            top_cats = sorted(
                cats.items(), key=lambda x: x[1].get("level", 0), reverse=True
            )[:5]

            msg = "üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–æ–ø –∫–æ—Ç–æ–≤:\n"
            for i, (user, data) in enumerate(top_cats, 1):
                msg += f" {i}. {data['name']} ‚Äî –£—Ä–æ–≤–µ–Ω—å: {data['level']} | \n"
            await ctx.send(msg)


        elif action == "pet":
            if username not in cats:
                await ctx.send(f"@{ctx.author.name}, —É —Ç–µ–±—è –Ω–µ—Ç –∫–æ—Ç–∞. üêæ")
                return
            cat = cats[username]
            add_petting_stat(cat)
            save_cats(cats)
            await ctx.send(f"@{ctx.author.name} –ø–æ–≥–ª–∞–¥–∏–ª –∫–æ—Ç–∞ {cat['name']} ! üòª")
        
        elif action == "meet":
            if len(args) < 3:
                await ctx.send("–ò—Å–ø–æ–ª—å–∑—É–π: !cat meet <username>")
                return
            friend = args[2].lower()
            if friend not in cats:
                await ctx.send(f"@{ctx.author.name}, —É {friend} –Ω–µ—Ç –∫–æ—Ç–∞. üêæ")
                return
            if friend in cats[username]["friends"]:
                await ctx.send(f"@{ctx.author.name}, –≤–∞—à–∏ –∫–æ—Ç—ã —É–∂–µ –¥—Ä—É–∑—å—è! üê±üê±")
                return
            cats[username]["friends"].append(friend)
            cats[friend]["friends"].append(username)
            save_cats(cats)
            await ctx.send(f"@{ctx.author.name} –∏ {friend} —Ç–µ–ø–µ—Ä—å –¥—Ä—É–∑—å—è! üê±üê±")
        
        elif action.startswith("info"):
            parts = action.split(maxsplit=1)
            target_user = parts[1].lower() if len(parts) > 1 else username
            cat = cats[username]
            if target_user not in cats:
                await ctx.send(f"@{ctx.author.name}, —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user} –Ω–µ—Ç –∫–æ—Ç–∞. üêæ")
                return

            experience_to_next_level = 100 * cat['level'] + (cat['level'] * 50)

            await ctx.send(
                f"@{ctx.author.name}, {cat['name']} üê± | –£—Ä–æ–≤–µ–Ω—å: {cat['level']} | –û–ø—ã—Ç: {cat['experience']}/{experience_to_next_level} | "
                f"–°—ã—Ç–æ—Å—Ç—å: {cat['hunger']}% üçñ | –ß–∏—Å—Ç–æ—Ç–∞: {cat['cleanliness']}% üõÅ | –í–µ—Å–µ–ª—å–µ: {cat['happiness']}% üéæ | "
                f"–ë–∞–ª–∞–Ω—Å: {cat['currency']} üí∞"
            )

        elif action == "friends":
            parts = action.split(maxsplit=1)
            target_user = parts[1].lower() if len(parts) > 1 else username
            if username not in cats:
                await ctx.send(f"@{ctx.author.name}, —É —Ç–µ–±—è –Ω–µ—Ç –∫–æ—Ç–∞. üêæ")
                return
            cat = cats[target_user]
            friends = [cats[friend]["name"] for friend in cat["friends"] if friend in cats]
            friends_list = ", ".join(friends) if friends else "–ù–µ—Ç"
            await ctx.send(
                f"@{ctx.author.name}, –î—Ä—É–∑—å—è: {friends_list} üê±"
            )
        elif action == "inv":
            parts = action.split(maxsplit=1)
            target_user = parts[1].lower() if len(parts) > 1 else username
            if username not in cats:
                await ctx.send(f"@{ctx.author.name}, —É —Ç–µ–±—è –Ω–µ—Ç –∫–æ—Ç–∞. üêæ")
                return
            cat = cats[target_user]
            await ctx.send(
                f"@{ctx.author.name}, –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å: {', '.join(cat['inventory']) if cat['inventory'] else '–ü—É—Å—Ç–æ'}"
            )

        
        elif action == "wash":
            if username not in cats:
                await ctx.send(f"@{ctx.author.name}, —É —Ç–µ–±—è –Ω–µ—Ç –∫–æ—Ç–∞. üêæ")
                return

            cat = cats[username]
            cat["cleanliness"] = 100
            save_cats(cats)
            await ctx.send(f"@{ctx.author.name}, –∫–æ—Ç {cat['name']} —Ç–µ–ø–µ—Ä—å —á–∏—Å—Ç—ã–π –∏ –¥–æ–≤–æ–ª–µ–Ω! üõÅ‚ú®")

        elif action == "play":
            if username not in cats:
                await ctx.send(f"@{ctx.author.name}, —É —Ç–µ–±—è –Ω–µ—Ç –∫–æ—Ç–∞. üêæ")
                return

            cat = cats[username]
            cat["happiness"] = min(100, cat["happiness"] + 20)
            save_cats(cats)
            await ctx.send(f"@{ctx.author.name}, –∫–æ—Ç {cat['name']} –ø–æ–∏–≥—Ä–∞–ª –∏ —Ç–µ–ø–µ—Ä—å —Å—á–∞—Å—Ç–ª–∏–≤! üéæüêæ")

